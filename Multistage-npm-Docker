# ===== STAGE 1: Build =====
# Use full Node.js image with npm, compilers, and build tools preinstalled
FROM node:18 as builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json to app/ in image.
COPY package*.json ./

# Install all dependencies from package.json. Docker caches npm install if package.json file don't change
RUN npm install

# Copy the entire project code into the container
COPY . .

# Compile and Build the project (output will go to the dist/ folder)
RUN npm run build    

# ===== STAGE 2: Run =====
# Use a lighter Node.js image with only runtime essentials
FROM node:18-slim

# Set working directory again for the final runtime image
WORKDIR /app

# Copy the built output/compiled-code in dist folder from the builder stage
COPY --from=builder /app/dist ./dist

# Copy only the package.json and lock file to install production dependencies
COPY --from=builder /app/package*.json ./

# Install only production dependencies (skips dev tools)
RUN npm install --only=production

# Define the default command to run when the container starts
CMD ["node", "dist/index.js"]   # Start the app using the built entry point
